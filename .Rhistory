}
cacheSolve 	<- function(x, ...)
{
invMA$getMA()
if(!is.null(invMA))
{
message("get cache")
return(invMA)
}
newMA 	<-x$getMA()
invMA	<-solve(newMA,...)
x$setinv(invMA)
invMA
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve 	<- function(x, ...)
{
invMA$CAgetinv()
if(!is.null(invMA))
{
message("get cache")
return(invMA)
}
newMA 	<-x$getMA()
invMA	<-solve(newMA,...)
x$setinv(invMA)
invMA
}
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve 	<- function(x, ...)
{
invMA	<-x$CAgetinv()
if(!is.null(invMA))
{
message("get cache")
return(invMA)
}
newMA 	<-x$getMA()
invMA	<-solve(newMA,...)
x$setinv(invMA)
invMA
}
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve 	<- function(x, ...)
{
invMA	<-x$CAgetinv()
if(!is.null(invMA))
{
message("get cache")
return(invMA)
}
newMA 	<-x$CAget()
invMA	<-solve(newMA,...)
x$setinv(invMA)
invMA
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve 	<- function(x, ...)
{
invMA	<-x$CAgetinv()
if(!is.null(invMA))
{
message("get cache")
return(invMA)
}
newMA 	<-x$CAget()
invMA	<-solve(newMA,...)
x$CAsetinv(invMA)
invMA
}
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
myMatrix_object$CAset(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
makeCacheMatrix <- function(x = matrix())
{
invMA 	<- NULL 													#def. inverted matrix NULL
setMA 	<- function(y) 												#set matrix
{
x <<- y
invMA <<- NULL
}
getMA 	<- function() x												#get matrix
setinv 	<- function(inverse) invMA <<- inverse 						#set inv matrix
getinv 	<- function() invMA 										#get inv matrix
list(set=setMA, get=getMA,CAsetinv=setinv,CAgetinv=getinv)  		#caching
}
cacheSolve 	<- function(x, ...)
{
invMA	<-x$CAgetinv()												#try loading inv matrix from cache
if(!is.null(invMA))													#if cache is there return it and leave function
{
message("get inv matrix from cache")
return(invMA)
}
message("calculation required")
newMA 	<-x$get()
invMA	<-solve(newMA,...)
x$CAsetinv(invMA)
invMA
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
makeCacheMatrix <- function(x = matrix())
{
invMA 	<- NULL 													#def. inverted matrix NULL
setMA 	<- function(y) 												#set matrix
{
x <<- y
invMA <<- NULL
}
getMA 	<- function() x												#get matrix
setinv 	<- function(inverse) invMA <<- inverse 						#set inv matrix
getinv 	<- function() invMA 										#get inv matrix
list(set=setMA, get=getMA,CAsetinv=setinv,CAgetinv=getinv)  		#for later access
}
cacheSolve 	<- function(x, ...)
{
invMA	<-x$CAgetinv()												#try loading inv matrix from cache
if(!is.null(invMA))													#if cache is there return it and leave function
{
message("get inv matrix from cache")
return(invMA)
}
message("calculation required")
newMA 	<-x$get()													#calc inv matrix
invMA	<-solve(newMA,...)
x$CAsetinv(invMA)													#cache inv matrix
invMA
}
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object$CAset(n2)
set.seed(1)
rpois(5,2)
set.seed(10)
x<-rep(0:1, each=5)
x
e<-rnorm (10,0,20)
e
y<-0.5 +2 * x +e
plot(y)
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100, replace=TRUE,c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =0.7)
flips2 <- rbinom(1, size = 100, prob =0.7)
flips2 <- rbinom(100, size = 1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100,25)
rpois(5)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$speed="Speed"", cars$dist)
plot(cars$speed="Speed", cars$dist)
plot(cars$speed as "Speed", cars$dist)
plot(cars$speed, cars$dist, xlab="Speed")
plot(cars$speed, cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab="Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
swirl()
library("swuírl")
library("swirl")
swirl()
?Devises
?Devices
plot(faithful)
with(faithful, plot(eruptions, waiting))
main="Old Faithful Geyser data"
with(faithful, plot(eruptions, waiting))
title main="Old Faithful Geyser data"
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(car$dist), "SWIRL rules!")
text(mean(cars$speed),max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot(displ, hwy, mpg)
ggplot(displ~hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
dev,cur()
dev.cur()
dev.off()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with airquality(plot(Wind,Ozone))
with(airquality,(plot(Wind,Ozone))
)
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$wind, airquality$Ozone, set="n")
plot(airquality$wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- airquality$Month=5
may <- airquality$Month=[5]
may <- airquality$Month=["5"]
may <- airquality$Month="5"
may <- airquality$Month
may <- subset(airquality, Month==5)
plot(may)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=20)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
plot(airquality$Wind, type="n",airquality$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(lty=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow, c(1,2))
par(mfrow= c(1,2))
ii
dim()
dim(notmay)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")
(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
ülot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(sqldf)
###downloading/unzipping data from source
src_url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(src_url, file.path(getwd(), "src_data.zip"))
unzip(zipfile = "src_data.zip")
file.remove("src_data.zip")
###import days 1/2/2002 and 2/2/2007 into data
data <- read.csv.sql("household_power_consumption.txt",
sep = ';',
header = TRUE,
sql="select * from file where Date in ('1/2/2007', '2/2/2007')")
#dim(data)
### merge date & time +make it machine readable
data$Date <-as.POSIXct(paste(data$Date,data$Time),format = "%d/%m/%Y %H:%M:%S")
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage], type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
setwd("C:/Users/ralf/Desktop/coursera/GitHUB/ExData_Plotting1")
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage], type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid"
, bty="n")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
#set your working directory here or choose via menu,
setwd("C:/Users/ralf/Desktop/coursera/GitHUB/ExData_Plotting1")
#load required packages
#install.packages("data.table")
#install.packages("dplyr")
#install.packages("sqldf")
#library(data.table)
#library(dplyr)
library(sqldf)
###downloading/unzipping data from source
src_url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(src_url, file.path(getwd(), "src_data.zip"))
unzip(zipfile = "src_data.zip")
file.remove("src_data.zip")
###import days 1/2/2002 and 2/2/2007 into data
data <- read.csv.sql("household_power_consumption.txt",
sep = ';',
header = TRUE,
sql="select * from file where Date in ('1/2/2007', '2/2/2007')")
#dim(data)
### merge date & time +make it machine readable
data$Date <-as.POSIXct(paste(data$Date,data$Time),format = "%d/%m/%Y %H:%M:%S")
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid"
, bty="n")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid"
, bty="n")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime")
dev.off()
###plot
png("plot4.png", width=480, height=480)
par(mfrow=c(2,2))
# window1
plot(data$Date, data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
# window2
plot(data$Date,data$Voltage, type="l", xlab="datetime", ylab="Voltage")
# window3
plot(data$Date, data$Sub_metering_1,col="black", type="l", xlab="", ylab="Energy sub metering")
lines(data$Date, data$Sub_metering_2,col="red")
lines(data$Date, data$Sub_metering_3,col="blue")
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ",
"Sub_metering_2  ",
"Sub_metering_3  ")
, lty="solid"
, bty="n")
# window4
plot(data$Date, data$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
